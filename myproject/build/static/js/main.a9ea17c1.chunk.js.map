{"version":3,"sources":["pages/pencil_color_blue.ico","redux/protocolAC.js","pages/PagesLinks.js","redux/protocolsListAC.js","pages/Page_Main.js","components/MenuButton.js","components/Blokcs/BlockDate_Edit.js","components/Blokcs/BlockNumber_Edit.js","components/Blokcs/BlockDepartment_Edit.js","components/Blokcs/BlockTeachers_Edit.js","components/Blokcs/BlockSubject_Edit.js","pages/Page_ProtocolRedact.js","components/Blokcs/BlockDate_View.js","components/Blokcs/BlockNumber_View.js","components/Blokcs/BlockDepartment_View.js","components/Blokcs/BlockTeachers_View.js","components/Blokcs/BlockSubject_View.js","components/Blokcs/BlockAgenda_View.js","components/ProtocolViewer.js","pages/Page_Preview.js","components/Protocol.js","pages/Page_ProtocolsList.js","pages/PageRouter.js","redux/protocolsListReducer.js","redux/protocolReducer.js","redux/reducers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PROTOCOL_SET","PROTOCOL_REDACT","PROTOCOL_PREVIEW","PROTOCOL_CREATE","BLOCK_CREATE","BLOCK_DELETE","BLOCK_UPDATE","protocol_setAC","_workMode","_data","_subNumber","type","workMode","dataProtocol","lastSubNumber","protocol_createAC","protocol_redactAC","block_createAC","_block","_pos","block","addPosition","block_deleteAC","_id","id","block_updateAC","blockPos","newBlock","PagesLinks","newProtocol","_this","props","dispatch","react_default","a","createElement","Fragment","className","src","logo","alt","react_router_dom","to","exact","activeClassName","onClick","this","React","Component","connect","PROTOCOL_LIST_SET","PROTOCOL_ADD","PROTOCOL_LIST_LOADING","PROTOCOL_LIST_ERROR","PROTOCOL_LIST_SORT","PROTOCOL_UPDATE","PROTOCOL_DELETE","protocol_addAC","_protocolsList","protocol_updateAC","_index","index","protocol_deleteAC","protocol_list_sortAC","Page_Main","data","status","ajaxHandlerScript","spProtocols","URLSearchParams","append","spDepartment","spTeachers","dataProtocolsList","dataDepartment","dataTeachers","prProtocolsList","isoFetch","method","body","then","response","ok","json","Err","Error","userMessage","prDepartment","prTeachers","lastProtocolId","Promise","all","forEach","el","i","res","JSON","parse","result","protocol","Math","max","dataDepartments","catch","error","console","key","PureComponent","state","protocolsList","MenuButton","getButton","BlockDate_Edit","dataChanged","EO","_objectSpread","indexOf","valueDate","target","value","name","defaultValue","onBlur","lastId","protocolBlocks","BlockNumber_Edit","valueNumberChanged","newblock","BlockNumber_Edit_objectSpread","valueNumber","BlockDepartment_Edit","departmentChanged","filter","blockType","BlockDepartment_Edit_objectSpread","valueDepartment","arrDisplay","map","code","onChange","label","hidden","BlockTeachers_Edit","idCheckedTeacher","parseFloat","newBlockCheckedTeachers","checkedTeachers","slice","splice","push","BlockTeachers_Edit_objectSpread","_this2","checkedDepartment","teachers","isChecked","includes","department","fio","defaultChecked","BlockSubject_Edit","valueChanged","subNumber","BlockSubject_Edit_objectSpread","subData","Object","defineProperty","deleteFieldSubjects","log","topicSubject","textSubject","textDecision","Page_ProtocolRedact","preview","idProtocol","history","saveProtocol","redacting","numProtocol","departmentPr","dateProtocol","alert","cancelProtocol","window","confirm","whatPosition","position","length","blocks","find","isBlockInList","isAdded","some","addFieldData","addFieldNumber","pos","addFieldDepartment","addFieldTeachers","addFieldSubjects","lastSubNum","informationFrom","BlocksView","Blocks","DATE","viewComp","NUMBER","DEPARTMENT","TEACHERS","SUBJECT","ViewComp","src_components_MenuButton","buttonComp","departmentName","rank","subject","BlockAgenda_View","protocolList","ProtocolViewer","BlockDate_View","BlockNumber_View","BlockDepartment_View","BlockTeachers_View","AGENDA","BlockSubject_View","assign","Page_Preview","showAllClients","previewlink","match","params","components_ProtocolViewer","Protocol","redactProtocol","prId","deleteProtocol","num","date","dep","departments","data-id","withRouter","Page_ProtocolsList","createProtocol","sortByNumber","sortList","sort","el1","el2","sortByDate","sortByDepartment","updatePassword","random","JSONProtocol","stringify","spLock","sp","fetch","arrProtocols","src_components_Protocol","PagesRouter","react_router","path","component","Page_PrConstructor","initState","protocolsListReducer","arguments","undefined","action","protocolsListReducer_objectSpread","concat","toConsumableArray","newState","title","protocolReducer","protocolReducer_objectSpread","newProtocolBlocks","combinedReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","App","es","src_pages_PagesLinks","PageRouter","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9ea17c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pencil_color_blue.3993f287.ico\";","const PROTOCOL_SET='PROTOCOL_SET';\r\nconst PROTOCOL_REDACT='PROTOCOL_REDACT';\r\nconst PROTOCOL_PREVIEW='PROTOCOL_PREVIEW';\r\nconst PROTOCOL_CREATE='PROTOCOL_CREATE';\r\n\r\n\r\nconst BLOCK_CREATE='BLOCK_CREATE';\r\nconst BLOCK_DELETE='BLOCK_DELETE';\r\nconst BLOCK_UPDATE='BLOCK_UPDATE';\r\n//------------- устанавливаем протокол (редактирвание или создание нового)\r\n\r\nconst protocol_setAC = function(_workMode, _data, _subNumber) {\r\n // console.log(_subNumber)\r\n  return {\r\n    type: PROTOCOL_SET,\r\n    workMode: _workMode,\r\n    dataProtocol: _data,\r\n    lastSubNumber: _subNumber,\r\n  };\r\n};\r\nconst protocol_createAC = function(_workMode) {\r\n  return {\r\n    type: PROTOCOL_CREATE,\r\n    workMode: _workMode,\r\n  };\r\n};\r\n\r\nconst protocol_previewAC = function() {\r\n  return {\r\n    type: PROTOCOL_PREVIEW,\r\n  };\r\n};\r\nconst protocol_redactAC = function() {\r\n  return {\r\n    type: PROTOCOL_REDACT,\r\n  };\r\n};\r\n\r\n// ----------------------------------------------------------------------------------\r\n\r\nconst block_createAC = function(_block,_pos) {\r\n  return {\r\n    type: BLOCK_CREATE,\r\n    block: _block,\r\n    addPosition:_pos,\r\n\r\n  };\r\n};\r\n\r\nconst block_deleteAC = function(_id) {\r\n  return {\r\n    type: BLOCK_DELETE,\r\n    id:_id,\r\n  };\r\n};\r\n\r\nconst block_updateAC = function(_id, _block) {\r\n  return {\r\n    type: BLOCK_UPDATE,\r\n    blockPos:_id,\r\n    newBlock:_block,\r\n  };\r\n};\r\n\r\nexport {\r\n  protocol_setAC, PROTOCOL_SET,\r\n  protocol_redactAC, PROTOCOL_REDACT,\r\n  protocol_previewAC, PROTOCOL_PREVIEW,\r\n  protocol_createAC, PROTOCOL_CREATE,\r\n\r\n  block_createAC, BLOCK_CREATE,\r\n  block_deleteAC, BLOCK_DELETE,\r\n  block_updateAC, BLOCK_UPDATE,\r\n\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport logo from './pencil_color_blue.ico';\r\nimport './PagesLinks.css';\r\nimport {protocol_createAC} from \"../redux/protocolAC\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass PagesLinks extends React.Component {\r\n\r\n  newProtocol = () => {\r\n    this.props.dispatch (protocol_createAC(1))\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n     <React.Fragment>\r\n\r\n       <img className=\"PageLink_Logo\" src={logo} alt={'logo'}/>\r\n        <NavLink to=\"/\"\r\n                 exact\r\n                 className=\"PageLinkMain\">\r\n          <div >ProtocolNaTi</div>\r\n        </NavLink>\r\n\r\n        <NavLink to=\"/protocolsList\"\r\n                 className=\"PageLink\"\r\n                 activeClassName=\"ActivePageLink\">\r\n          <div className=\"PageButton\">Список <br/> протоколов</div>\r\n        </NavLink>\r\n\r\n        <NavLink to=\"/protocolRedact\"\r\n                 className=\"PageLink\"\r\n                 activeClassName=\"ActivePageLink\"\r\n                 onClick={this.newProtocol}>\r\n          <div className=\"PageButton\">Редактор<br/>протоколов</div>\r\n        </NavLink>\r\n\r\n       {/*<NavLink to=\"/protocolCreate\"\r\n                className=\"PageLinkPreview\"     // Видима только когда активна!\r\n                activeClassName=\"ActivePageLinkPreview\">\r\n         <div className=\"PageButton\">Редактировать<br/>протокол</div>\r\n       </NavLink>*/}\r\n\r\n         <NavLink to=\"/protocolPreview\"\r\n                  className=\"PageLinkPreview\"     // Видима только когда активна!\r\n                  activeClassName=\"ActivePageLinkPreview\">\r\n           <div className=\"PageButton\">Просмотр<br/>протокола</div>\r\n         </NavLink>\r\n\r\n     </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect()(PagesLinks);\r\n\r\n","const PROTOCOL_LIST_SET='PROTOCOL_LIST_SET';\r\nconst PROTOCOL_ADD='PROTOCOL_ADD';\r\nconst PROTOCOL_LIST_LOADING ='PROTOCOL_LIST_LOADING';\r\nconst PROTOCOL_LIST_ERROR ='PROTOCOL_LIST_ERROR';\r\nconst PROTOCOL_LIST_SORT ='PROTOCOL_LIST_SORT';\r\n\r\nconst PROTOCOL_UPDATE='PROTOCOL_UPDATE';\r\nconst PROTOCOL_DELETE='PROTOCOL_DELETE'\r\n\r\nconst protocol_list_loadingAC = function() {\r\n  return {\r\n    type: PROTOCOL_LIST_LOADING,\r\n  };\r\n};\r\n\r\nconst protocol_list_errorAC = function() {\r\n  return {\r\n    type: PROTOCOL_LIST_ERROR,\r\n  };\r\n};\r\n\r\nconst protocol_list_setAC = function(_protocolsList, _departments,_teachers, _lastProtocolId) {\r\n  return {\r\n    type: PROTOCOL_LIST_SET,\r\n    dataProtocolsList: _protocolsList,\r\n    dataDepartments: _departments,\r\n    dataTeachers: _teachers,\r\n    lastProtocolId: _lastProtocolId,\r\n  };\r\n};\r\n\r\nconst protocol_addAC = function(_protocolsList){\r\n  return{\r\n    type: PROTOCOL_ADD,\r\n    dataProtocol: _protocolsList,\r\n  };\r\n};\r\nconst protocol_updateAC = function(_protocolsList, _index){\r\n  return{\r\n    type: PROTOCOL_UPDATE,\r\n    dataProtocol: _protocolsList,\r\n    index: _index,\r\n  };\r\n};\r\n\r\nconst protocol_deleteAC = function(_index){\r\n  return{\r\n    type: PROTOCOL_DELETE,\r\n    index: _index,\r\n  };\r\n};\r\n\r\nconst protocol_list_sortAC = function(_protocolsList){\r\n  return{\r\n    type: PROTOCOL_LIST_SORT,\r\n    dataProtocol: _protocolsList,\r\n  };\r\n};\r\n\r\nexport {\r\n  protocol_list_loadingAC, PROTOCOL_LIST_LOADING,\r\n  protocol_list_setAC, PROTOCOL_LIST_SET,\r\n  protocol_list_errorAC, PROTOCOL_LIST_ERROR,\r\n  protocol_list_sortAC, PROTOCOL_LIST_SORT,\r\n\r\n  protocol_addAC, PROTOCOL_ADD,\r\n  protocol_updateAC, PROTOCOL_UPDATE,\r\n  protocol_deleteAC, PROTOCOL_DELETE,\r\n}\r\n","import React from 'react';\r\nimport './Page_Main.css';\r\nimport {protocol_list_errorAC, protocol_list_loadingAC, protocol_list_setAC} from \"../redux/protocolsListAC\";\r\nimport isoFetch from \"isomorphic-fetch\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Page_Main extends React.PureComponent {\r\n   componentWillMount() {\r\n    //console.log(\"сработал componentWillMount\")\r\n}\r\n  componentDidMount() {\r\n    if(this.props.data.status === 0){\r\n      this.props.dispatch (protocol_list_loadingAC()); // переводим раздел countries стора в состаяние \"загружается\"\r\n      const ajaxHandlerScript = \"https://fe.it-academy.by/AjaxStringStorage2.php\";\r\n// --------------------------------- CONFIG запросов --------------------------------- //\r\n      let spProtocols = new URLSearchParams();\r\n      spProtocols.append('f', 'READ');\r\n      spProtocols.append('n', 'ZHOLUD_PR_PROTOCOLS');\r\n\r\n      let spDepartment = new URLSearchParams();\r\n      spDepartment.append('f', 'READ');\r\n      spDepartment.append('n', 'ZHOLUD_PR_DEPARTMENT');\r\n\r\n      let spTeachers = new URLSearchParams();\r\n      spTeachers.append('f', 'READ');\r\n      spTeachers.append('n', 'ZHOLUD_PR_TEACHERS');\r\n// ----------------------- СОЗДАЕМ ПРОМИСЫ ДЛЯ 3-Х ЗАПРОСОВ -------------------------- //\r\n      let prProtocolsList = isoFetch(ajaxHandlerScript, { method: 'post', body: spProtocols }).then( (response) => { // response - HTTP-ответ\r\n        if (!response.ok) {\r\n          let Err=new Error(\"fetch error \" + response.status);\r\n          Err.userMessage=\"Ошибка связи\";\r\n          throw Err;\r\n        }\r\n        else\r\n          return response.json();\r\n      } );// промис протокола\r\n\r\n      let prDepartment = isoFetch(ajaxHandlerScript, { method: 'post', body: spDepartment }).then( (response) => { // response - HTTP-ответ\r\n        if (!response.ok) {\r\n          let Err=new Error(\"fetch error \" + response.status);\r\n          Err.userMessage=\"Ошибка связи\";\r\n          throw Err;\r\n        }\r\n        else\r\n          return response.json();\r\n      } ); // промис департамента\r\n\r\n      let prTeachers = isoFetch(ajaxHandlerScript, { method: 'post', body: spTeachers }).then( (response) => { // response - HTTP-ответ\r\n        if (!response.ok) {\r\n          let Err = new Error(\"fetch error \" + response.status);\r\n          Err.userMessage = \"Ошибка связи\";\r\n          throw Err;\r\n        } else\r\n          return response.json();\r\n      });\r\n\r\n      let dataProtocolsList;\r\n      let dataDepartment;\r\n      let dataTeachers;\r\n      let lastProtocolId= 0;\r\n\r\n      Promise.all([prProtocolsList,prDepartment,prTeachers])\r\n        .then( (data) => {\r\n// -------- ЕСЛИ ПРОМИ РЕШИЛСЯ ДЛЯ 3-Х ЗАПРОСОВ ТО В ПЕРЕМЕННУЮ ПЕРЕДАЕМ ДАННЫЕ ----------- //\r\n          data.forEach((el, i) => {\r\n            let res = JSON.parse(el.result);\r\n            if (i === 0){\r\n              dataProtocolsList = res;\r\n// -------- ВЫЧИСЛЯЕМ ПОСЛЕДНИЙ ID протокола ---------- //\r\n              dataProtocolsList.forEach((protocol) => {\r\n                lastProtocolId = Math.max(lastProtocolId, protocol.id)\r\n              });\r\n            }\r\n            else if (i===1){\r\n              dataDepartment = res\r\n            }\r\n            else if (i===2){\r\n              dataTeachers = res\r\n            }\r\n          });\r\n//    console.log(\"dataProtocolsList\", dataProtocolsList, dataDepartment, dataTeachers, lastProtocolId)\r\n// ----------------------- ПЕРЕДАЕМ ДАННЫЕ В STORE -------------------------- //\r\n          this.props.dispatch (protocol_list_setAC(dataProtocolsList, dataDepartment, dataTeachers, lastProtocolId));\r\n        })\r\n        .catch( error => {\r\n          console.error(error);\r\n          this.props.dispatch (protocol_list_errorAC()) // переводим раздел protocol_List стора в состояние \"ошибка\"\r\n        } );\r\n\r\n    }\r\n }\r\n\r\n  render() {\r\n    if (this.props.data.status <= 1)\r\n      return \"загрузка данных...\";\r\n\r\n    if (this.props.data.status === 2)\r\n      return \"ошибка загрузки данных\";\r\n    else {\r\n    //console.log(\"сработал render\")\r\n    return (\r\n\r\n\r\n      <React.Fragment>\r\n\r\n        <div key=\"Protocol_control\" className=\"Protocol_control\">\r\n          <div className=\"Preview_title\"> <h2>Программа для создания протоколов</h2> </div>\r\n        </div>\r\n\r\n      <div className=\"Main_Table\">\r\n        <p>Программа <b>ProtocolNaTi</b> - предоставляет готовое решение для управления процессом создания, доработки и изменения протоколов.</p>\r\n        <div className=\"Main_box\">\r\n          <p>Для просмотра созданных протоколов нажмите \"Список протоколов\" в верхей панели. Так же в списке протоколов есть возможность редактировать протокол и удалить.</p>\r\n          <p>Для создание нового протокола нажмите \"Редактор протоколов\", либо во вкладке протоколов нажать \"Создать протокол\"</p>\r\n          <p>Что бы сохранить протокол, на панеле нажмите \"Сохранить\", для выхода из редактирования или создания протокола нажать \"Не сохранять\", либо перейти в меню навигации.</p>\r\n          <p>При редактировании или создании доступен просмотр протокола, для этого нажать \"Предпросмотр\".</p>\r\n\r\n        </div>\r\n      </div>\r\n\r\n      </React.Fragment>\r\n\r\n        );\r\n  }}\r\n}\r\n\r\nconst mapStateToProps = function (state) {\r\n\r\n  return {\r\n\r\n    data: state.protocolsList,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Page_Main);\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './MenuButton.css'\r\n\r\nclass MenuButton extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    getButton: PropTypes.func.isRequired,\r\n    buttonComp: PropTypes.string.isRequired\r\n  };\r\n\r\n  render(){\r\n    return (\r\n      <React.Fragment>{this.props.getButton()}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default MenuButton;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from \"react-redux\";\r\nimport {block_updateAC} from \"../../redux/protocolAC\";\r\n\r\nclass BlockDate_Edit extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    data: PropTypes.shape({   // --- получаем от родителя\r\n      blockType: PropTypes.string.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n      valueDate: PropTypes.string.isRequired,\r\n    })\r\n  }\r\n\r\n  dataChanged = (EO) => {\r\n    let newBlock = {...this.props.data}\r\n    let blockPos = this.props.dataProtocol.indexOf(this.props.data )\r\n    newBlock = {...newBlock, valueDate: EO.target.value};\r\n    this.props.dispatch(block_updateAC(blockPos, newBlock))\r\n  };\r\n\r\n  render(){\r\n  // console.log(this.props)\r\n    return (\r\n      <React.Fragment >\r\n        <div key = \"Date\" className=\"Protocol_Row\">\r\n          <div  className=\"Protocol_HeadCell\" >\r\n            Дата\r\n          </div>\r\n          <div className=\"Protocol_Cell\">\r\n            <input className=\"textareaList\"\r\n                   type=\"date\"\r\n                   name=\"Date\"\r\n                   defaultValue={this.props.data.valueDate}\r\n                   onBlur={this.dataChanged}\r\n          />\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = function (state) {\r\n  return {\r\n    lastId: state.lastId,\r\n    dataProtocol: state.protocol.dataProtocol.protocolBlocks,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(BlockDate_Edit);\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from \"react-redux\";\r\nimport {block_updateAC} from \"../../redux/protocolAC\";\r\n\r\nclass BlockNumber_Edit extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    data: PropTypes.shape({\r\n      blockType: PropTypes.string.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n      valueNumber: PropTypes.string.isRequired,\r\n    })\r\n\r\n    };\r\n\r\n  valueNumberChanged = (EO) => {\r\n\r\n    let newblock = {...this.props.data}\r\n    let blockPos = this.props.dataProtocol.indexOf(this.props.data )\r\n\r\n    newblock = {...newblock, valueNumber:EO.target.value};\r\n\r\n    this.props.dispatch(block_updateAC(blockPos, newblock))\r\n\r\n  };\r\n  render(){\r\n   // console.log(this.props)\r\n    return (\r\n      <React.Fragment>\r\n        <div key = \"Number\" className=\"Protocol_Row\">\r\n          <div  className=\"Protocol_HeadCell\" >\r\n            Номер протокола\r\n          </div>\r\n          <div className=\"Protocol_Cell\">\r\n            <input className=\"textareaList\"\r\n                   type=\"number\"\r\n                   name=\"Number\"\r\n                   defaultValue={this.props.data.valueNumber}\r\n                   onBlur={this.valueNumberChanged}\r\n          />\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = function (state) {\r\n  return {\r\n    lastId: state.lastId,\r\n    dataProtocol: state.protocol.dataProtocol.protocolBlocks,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(BlockNumber_Edit);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {block_updateAC} from \"../../redux/protocolAC\";\r\n\r\nclass BlockDepartment_Edit extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    data: PropTypes.shape({\r\n      blockType: PropTypes.string.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n      valueDepartment: PropTypes.string.isRequired,\r\n    })\r\n  };\r\n\r\n  departmentChanged = (EO) => {\r\n    let newblock = this.props.data\r\n    let blockPos = this.props.dataProtocol.indexOf(this.props.dataProtocol.filter(el=> el.blockType === \"DEPARTMENT\")[0] )\r\n    newblock = {...newblock, valueDepartment:EO.target.value};\r\n    this.props.dispatch(block_updateAC(blockPos, newblock))\r\n   };\r\n\r\n  render(){\r\n\r\n\r\n    let arrDisplay = this.props.dataDepartments.map((el) => {\r\n      return <option key={el.code} value={el.code}>{el.name}</option>\r\n    });\r\n\r\n    return (\r\n      <React.Fragment >\r\n        <div key = \"Department\" className=\"Protocol_Row\">\r\n          <div  className=\"Protocol_HeadCell\" >\r\n            Кафедра\r\n          </div>\r\n          <div className=\"Protocol_Cell\">\r\n            <select className=\"textareaList\"\r\n                    name=\"Department\"\r\n                    defaultValue={this.props.data.valueDepartment}\r\n                    onChange={this.departmentChanged}>\r\n              <option label=\" \" hidden={true} > </option>\r\n            {arrDisplay}\r\n          </select>\r\n\r\n          </div>\r\n        </div>\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = function (state) {\r\n  return {\r\n    id: state.protocol.lastId,\r\n    dataProtocol: state.protocol.dataProtocol.protocolBlocks,\r\n    dataDepartments: state.protocolsList.dataDepartments,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(BlockDepartment_Edit);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from \"react-redux\";\r\nimport {block_updateAC} from \"../../redux/protocolAC\";\r\n\r\nclass BlockTeachers_Edit extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    department:PropTypes.array,          // ----- из redux\r\n    teachers: PropTypes.array,           // ----- из redux\r\n    data: PropTypes.shape({   // --- получаем от родителя весь блок!!!!!\r\n       blockType: PropTypes.string.isRequired,\r\n       checkedDepartment: PropTypes.string.isRequired,\r\n       checkedTeachers: PropTypes.array.isRequired,\r\n       id: PropTypes.number.isRequired,\r\n     })\r\n    };\r\n\r\n  dataChanged = (EO) => {\r\n\r\n    let block = this.props.data\r\n    let idCheckedTeacher =  parseFloat(EO.target.name);\r\n\r\n    let blockPos = this.props.dataProtocol.indexOf(this.props.dataProtocol.filter(el=> el.blockType === \"TEACHERS\")[0] )\r\n\r\n    let newBlockCheckedTeachers=block.checkedTeachers.slice();\r\n    if(block.checkedTeachers.indexOf(idCheckedTeacher)>=0){\r\n      newBlockCheckedTeachers.splice(block.checkedTeachers.indexOf(idCheckedTeacher), 1)\r\n    }\r\n    else {\r\n      newBlockCheckedTeachers.push(idCheckedTeacher)\r\n    }\r\n    this.props.dispatch(block_updateAC( blockPos, {...block,checkedTeachers:newBlockCheckedTeachers}));  // передать (новый протокол)\r\n  };\r\n\r\n  render(){\r\n   //console.log(\"this.props\", this.props)\r\n    let arrDisplay;\r\n\r\n    let checkedDepartment = this.props.dataProtocol.filter(el=> el.blockType === \"DEPARTMENT\")[0].valueDepartment\r\n\r\n  //  console.log(checkedDepartment)\r\n\r\n     if(checkedDepartment) {\r\n       arrDisplay = this.props.teachers.map((el) => {\r\n         //console.log(\"el \", el)\r\n\r\n         let isChecked = (this.props.data.checkedTeachers.includes(el.id)); // проверка есть ли преподаватель в списки с галочками\r\n        //console.log(\"el.department \", el.department)\r\n         return (el.department === checkedDepartment) &&\r\n\r\n           <label key={el.fio} className=\"Protocol_Teacher_label\">\r\n             <input type=\"checkbox\"\r\n                    name={el.id}\r\n                    defaultChecked={isChecked}\r\n                    onBlur={this.dataChanged}\r\n             /> {el.fio}\r\n           </label>\r\n       })\r\n     }\r\n     else {\r\n      arrDisplay = <span>Выберите кафедру</span>\r\n     }\r\n\r\n    return (\r\n      <React.Fragment>\r\n\r\n        <div key = \"Teachers\" className=\"Protocol_Row\">\r\n          <div  className=\"Protocol_HeadCell\" >\r\n            Присутствовали\r\n          </div>\r\n        <div className=\"Protocol_Teachers_box\">\r\n          {arrDisplay}\r\n        </div>\r\n          </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = function (state) {\r\n\r\n  return {\r\n    dataProtocol: state.protocol.dataProtocol.protocolBlocks,\r\n    department: state.protocolsList.dataDepartments,\r\n    dataProtocolsList:  state.protocolsList,\r\n    teachers: state.protocolsList.dataTeachers,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(BlockTeachers_Edit);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from \"react-redux\";\r\nimport {block_deleteAC, block_updateAC} from \"../../redux/protocolAC\";\r\n\r\nclass BlockSubject_Edit extends React.PureComponent {\r\n\r\n   static propTypes = {\r\n    data: PropTypes.shape({\r\n      blockType: PropTypes.string.isRequired,\r\n      id: PropTypes.number,\r\n\r\n      subData: PropTypes.shape({\r\n        informationFrom: PropTypes.string.isRequired,\r\n        textDecision: PropTypes.string.isRequired,\r\n        textSubject: PropTypes.string.isRequired,\r\n        topicSubject: PropTypes.string.isRequired,\r\n      })\r\n    })\r\n  };\r\n\r\n  valueChanged = (EO) => {\r\n     let newblock = this.props.data;\r\n    let blockPos = this.props.dataProtocol.indexOf(this.props.dataProtocol.filter(el=> el.subNumber === this.props.data.subNumber)[0]  )\r\n    newblock = {...newblock,  subData: {...newblock.subData, [EO.target.name]:EO.target.value}}\r\n    this.props.dispatch(block_updateAC(blockPos, newblock))\r\n  };\r\n\r\n  deleteFieldSubjects = () =>{\r\n    let block = this.props.dataProtocol.filter(el=> el.id === this.props.data.id)[0]\r\n    this.props.dispatch(block_deleteAC(block.id))\r\n  };\r\n\r\n  render(){\r\nconsole.log(this.props)\r\n    return (\r\n      <React.Fragment>\r\n        <div key={this.props.id} className=\"Protocol_Row\">\r\n          <div className=\"Protocol_HeadCell\">СЛУШАЛИ ВОПРОС</div>\r\n\r\n          <div className=\"Protocol_Row\">Тема: <input className=\"textareaList\"\r\n                                                     type=\"text\"\r\n                                                     name=\"topicSubject\"\r\n                                                     defaultValue={this.props.data.subData.topicSubject}\r\n                onBlur={this.valueChanged}\r\n          /></div>\r\n\r\n          <div className=\"Protocol_Row\">\r\n                    <textarea className=\"textareaList\"\r\n                              name=\"textSubject\"\r\n                              defaultValue={this.props.data.subData.textSubject}\r\n                              onBlur={this.valueChanged}/>\r\n          </div>\r\n          <div className=\"Protocol_Row\"> Решили:\r\n            <textarea className=\"textareaList\"\r\n                      name=\"textDecision\"\r\n                      defaultValue={this.props.data.subData.textDecision}\r\n                      onBlur={this.valueChanged}/>\r\n          </div>\r\n          <input type=\"button\" value=\"Х\" name=\"Subjects\"\r\n                 onClick={this.deleteFieldSubjects}/>\r\n        </div>\r\n         </React.Fragment>\r\n    )\r\n  }\r\n\r\n}\r\nconst mapStateToProps = function (state) {\r\n  return {\r\n    id: state.protocol.lastId,\r\n    dataProtocol:state.protocol.dataProtocol.protocolBlocks,\r\n    protocol: state.protocol,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(BlockSubject_Edit);\r\n","import React from 'react';\r\nimport './Page_ProtocolRedact.css';\r\nimport '../components/MenuButton.css';\r\nimport MenuButton from \"../components/MenuButton\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport BlockDate_Edit from \"../components/Blokcs/BlockDate_Edit\";\r\nimport BlockNumber_Edit from \"../components/Blokcs/BlockNumber_Edit\";\r\nimport BlockDepartment_Edit from \"../components/Blokcs/BlockDepartment_Edit\";\r\nimport BlockTeachers_Edit from \"../components/Blokcs/BlockTeachers_Edit\";\r\nimport BlockSubject_Edit from \"../components/Blokcs/BlockSubject_Edit\";\r\nimport {block_createAC} from \"../redux/protocolAC\";\r\nimport {protocol_addAC, protocol_updateAC} from \"../redux/protocolsListAC\";\r\n\r\n\r\nclass Page_ProtocolRedact extends React.PureComponent {\r\n\r\n  preview = () => {\r\n    let idProtocol = this.props.protocol.dataProtocol.id\r\n    this.props.history.push('/protocolPreview/'+ idProtocol);\r\n  };\r\n\r\n\r\n  saveProtocol = () => {\r\n    if (this.props.protocol.redacting){\r\n     // console.log(this.props)\r\n      let newProtocol = { };\r\n\r\n      if(this.props.protocol.dataProtocol.id) {\r\n        newProtocol.id = this.props.protocol.dataProtocol.id // ---- если id уже есть в списке протоколов\r\n        // ------- НАХОДИМ ЗНАЧЕНИЯ В БЛОКАХ ------------ //\r\n        this.props.protocol.dataProtocol.protocolBlocks.forEach((el) => {\r\n          if( el.blockType === \"NUMBER\") {\r\n            newProtocol.numProtocol = el.valueNumber;\r\n          }\r\n          if (el.blockType === \"DEPARTMENT\") {\r\n            newProtocol.departmentPr = el.valueDepartment;\r\n          }\r\n          if (el.blockType === \"DATE\") {\r\n            newProtocol.dateProtocol = el.valueDate;\r\n          }\r\n        });\r\n        newProtocol.protocolBlocks = this.props.protocol.dataProtocol.protocolBlocks;\r\n        let index;\r\n          this.props.protocolsList.dataProtocolsList.filter((el,i) => {\r\n          if(el.id === newProtocol.id){\r\n           // console.log(\"el.id =\",el.id, \"  newProtocol.id =\", newProtocol.id);\r\n             index = i}\r\n          return null\r\n        });\r\n\r\n        this.props.dispatch(protocol_updateAC(newProtocol, index));\r\n      }\r\n      else {\r\n          newProtocol.id = this.props.protocolsList.lastProtocolId + 1;// ---- если id нет в списке протоколов\r\n\r\n        // ------- НАХОДИМ ЗНАЧЕНИЯ В БЛОКАХ ------------ //\r\n        this.props.protocol.dataProtocol.protocolBlocks.forEach((el) => {\r\n          if( el.blockType === \"NUMBER\") {\r\n            newProtocol.numProtocol = el.valueNumber;\r\n          }\r\n          if (el.blockType === \"DEPARTMENT\") {\r\n            newProtocol.departmentPr = el.valueDepartment;\r\n          }\r\n          if (el.blockType === \"DATE\") {\r\n            newProtocol.dateProtocol = el.valueDate;\r\n          }\r\n        });\r\n        newProtocol.protocolBlocks = this.props.protocol.dataProtocol.protocolBlocks;\r\n        this.props.dispatch(protocol_addAC(newProtocol));\r\n      }\r\n\r\n     this.props.history.push('/protocolsList');\r\n    }\r\n    else {\r\n      alert(\"Изменений не было внесено\")\r\n    }\r\n  }\r\n\r\n  cancelProtocol = () =>{\r\n    if (this.props.protocol.redacting) {   //проверяем на наличие именений в протоколе\r\n      const conf =  window.confirm(`Вы уверены, что хотите выйти из протокола не сохранившись?`);\r\n      if(conf){\r\n        this.props.history.push('/protocolsList');\r\n      }\r\n    }\r\n    // если не было изменений то сразу же возвращаемся  в список\r\n    else {\r\n      this.props.history.push('/protocolsList');\r\n    }\r\n  };\r\n\r\n  whatPosition = (blockType) => {\r\n    let position;\r\n    switch ( blockType ) {\r\n      case \"SUBJECT\":\r\n        position = this.props.protocol.dataProtocol.protocolBlocks.length;\r\n        return position;\r\n      case \"TEACHERS\":\r\n        if (this.props.blocks.find((el, i) =>\r\n          el.valueDepartment === \"SUBJECT\" ? position = i - 1 : position = this.props.blocks.length - 1\r\n        ))\r\n          return position;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  // проверка на наличие блока в протоколе\r\n  isBlockInList = (blockType) => {\r\n    let isAdded = this.props.protocol.dataProtocol.protocolBlocks.some(el => el.blockType === blockType);\r\n    if (isAdded) {\r\n      alert(\"Такое поле уже было добавлено\")\r\n    } else {\r\n      return !isAdded\r\n    }\r\n  };\r\n\r\n  addFieldData = () => {\r\n    if (this.isBlockInList(\"DATE\")) {\r\n      let block = {\r\n        \"blockType\": \"DATE\",\r\n        \"valueDate\": \"\"\r\n      };\r\n      this.props.dispatch(block_createAC(block, 0))\r\n    }\r\n\r\n  };\r\n  addFieldNumber = () => {\r\n    if (this.isBlockInList(\"NUMBER\")) {\r\n      let block = {\r\n        \"blockType\": \"NUMBER\",\r\n        \"valueNumber\": null,\r\n      };\r\n      let pos = this.whatPosition(\"NUMBER\") + 1\r\n      this.props.dispatch(block_createAC(block, pos))\r\n    }\r\n  };\r\n  addFieldDepartment = () => {\r\n    if (this.isBlockInList(\"DEPARTMENT\")) {\r\n      let block = {\r\n        \"blockType\": \"DEPARTMENT\",\r\n        \"valueDepartment\": \"\",\r\n      };\r\n      let pos = this.whatPosition(\"DEPARTMENT\")\r\n      this.props.dispatch(block_createAC(block, pos))\r\n    }\r\n  };\r\n  addFieldTeachers = () => {\r\n    if (this.isBlockInList(\"TEACHERS\")) {\r\n      let depart = this.props.blocks.map(el =>\r\n        (el.blockType === \"DEPARTMENT\") ? el.checkedDepartment : \"Выберите кафедру\"\r\n      )\r\n      let block = {\r\n        \"blockType\": \"TEACHERS\",\r\n        \"checkedDepartment\": depart,\r\n        \"checkedTeachers\": []\r\n      };\r\n      let pos = this.whatPosition(\"TEACHERS\")\r\n      this.props.dispatch(block_createAC(block, pos))\r\n    }\r\n  };\r\n  addFieldSubjects = () => {\r\n    let block = {\r\n      \"blockType\": \"SUBJECT\",\r\n      \"subNumber\": this.props.lastSubNum + 1,    //номер расчитывать нужно\r\n      \"subData\": {\r\n        \"topicSubject\": \"\",\r\n        \"informationFrom\": \"\",\r\n        \"textSubject\": \"\",\r\n        \"textDecision\": \"\",\r\n      }\r\n    };\r\n\r\n    let pos = this.whatPosition(\"SUBJECT\")\r\n    this.props.dispatch(block_createAC(block, pos))\r\n  };\r\n\r\n  render() {\r\n  // console.log(this.props)\r\n\r\n      let Blocks = {\r\n        \"DATE\": {\r\n          viewComp: BlockDate_Edit,\r\n        },\r\n        \"NUMBER\": {\r\n          viewComp: BlockNumber_Edit,\r\n        },\r\n        \"DEPARTMENT\": {\r\n          viewComp: BlockDepartment_Edit,\r\n        },\r\n        \"TEACHERS\": {\r\n          viewComp: BlockTeachers_Edit,\r\n        },\r\n        \"SUBJECT\": {\r\n          viewComp: BlockSubject_Edit,\r\n        },\r\n      };\r\n\r\n      let blocks = this.props.protocol.dataProtocol.protocolBlocks;\r\n    //  console.log(this.props)\r\n    let BlocksView;\r\n      if (blocks) {\r\n        BlocksView = blocks.map((el) => {\r\n          let ViewComp = Blocks[el.blockType].viewComp;\r\n          return <ViewComp key={el.lastId+el.blockType} data={el}/>;\r\n        });\r\n      }\r\n\r\n    return (\r\n        <React.Fragment>\r\n          {/*------------------------ меню управления конструктором -------------------------*/}\r\n          <div className=\"Protocol_control\"><div className=\"Preview_title\"> <h2>Меню редактирования протокола</h2> </div>\r\n            <input key=\"cancelBut\" className='Protocol_button cancelBut' type=\"button\" value=\"Не сохранять\" onClick={this.cancelProtocol}/>\r\n            <input key=\"saveBut\" className='Protocol_button saveBut' type=\"button\" value=\"Сохранить\" onClick={this.saveProtocol}/>\r\n            <input key=\"But\" className='Protocol_button ' type=\"button\" value=\"Предпросмотр\" onClick={this.preview}/>\r\n          </div>\r\n\r\n          <div className=\"Protocol_box\">\r\n\r\n\r\n            <div  className=\"Protocol_menu\">\r\n\r\n              <ul className='navigation-menu'>\r\n                <p className ='add_title'>Добавляемые поля</p>\r\n                <MenuButton key=\"Data\"\r\n                            buttonComp=\"Data\" // ---- передаем ему имя компонента который нужно будет добавить на лист\r\n                            getButton={() =>\r\n                              <input className=\"buttonMenu\" type=\"button\" value=\"Дата\" name=\"Data\"\r\n                                     onClick={this.addFieldData}/>\r\n                            }/>\r\n                <MenuButton key=\"Number\"\r\n                            buttonComp=\"Number\" // ---- передаем ему имя компонента который нужно будет добавить на лист\r\n                            getButton={() =>\r\n                              <input className=\"buttonMenu\" type=\"button\" value=\"Номер\" name=\"Number\"\r\n                                     onClick={this.addFieldNumber}/>\r\n                            }/>\r\n                <MenuButton key=\"Department\"\r\n                            buttonComp=\"Department\" // ---- передаем ему имя компонента который нужно будет добавить на лист\r\n                            getButton={() =>\r\n                              <input className=\"buttonMenu\" type=\"button\" value=\"Кафедра\" name=\"Department\"\r\n                                     onClick={this.addFieldDepartment}/>\r\n                            }/>\r\n                <MenuButton key=\"Teachers\"\r\n                            buttonComp=\"Teachers\" // ---- передаем ему имя компонента который нужно будет добавить на лист\r\n                            getButton={() =>\r\n                              <input className=\"buttonMenu\" type=\"button\" value=\"Преподаватели\" name=\"Teachers\"\r\n                                     onClick={this.addFieldTeachers}/>\r\n                            }/>\r\n                <MenuButton key=\"Subjects\"\r\n                            buttonComp=\"Subjects\" // ---- передаем ему имя компонента который нужно будет добавить на лист\r\n                            getButton={() =>\r\n                              <input className=\"buttonMenu\" type=\"button\" value=\"Вопрос повестки дня\" name=\"Subjects\"\r\n                                     onClick={this.addFieldSubjects}/>\r\n                            }/>\r\n                   </ul>\r\n            </div>\r\n\r\n            <div  className=\"Protocol_info\">\r\n              <div className=\"ProtocolInfo_box\">\r\n                <div  className=\"Protocol_Table\">\r\n\r\n                  {BlocksView}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n\r\nconst mapStateToProps = function (state) {\r\n\r\n  return {\r\n    protocol: state.protocol,\r\n    protocolsList: state.protocolsList,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Page_ProtocolRedact);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass BlockDate_Edit extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    valueDate: PropTypes.string.isRequired,\r\n    };\r\n\r\n  render(){\r\n\r\n    return (\r\n      <React.Fragment >\r\n        <div key = \"Date\" className=\"Protocol_Row\">\r\n          <div  className=\"Protocol_HeadCell\" >\r\n            Дата\r\n          </div>\r\n          <div className=\"Protocol_Cell\"> {this.props.valueDate}\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default BlockDate_Edit;","import React from 'react';\r\n\r\n\r\nclass BlockNumber_Edit extends React.PureComponent {\r\n\r\n  render(){\r\n    return (\r\n      <React.Fragment>\r\n        <div key = \"Number\" className=\"Protocol_Row\">\r\n          <div  className=\"Protocol_HeadCell\" >\r\n            Протокол №{this.props.valueNumber}\r\n          </div>\r\n          <div className=\"Protocol_Cell\"> </div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BlockNumber_Edit;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport dataDepartments from '../../dataDepartments'\r\n\r\nclass BlockDepartment_Edit extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    valueDepartment: PropTypes.string.isRequired,\r\n    };\r\n\r\n  state = {\r\n  };\r\n\r\n  render(){\r\n    // --------- ПОДСТАВЛЯЕМ ПОЛНОЕ НАЗВАНИЕ КАФЕДРЫ ----------------- //\r\n    let departmentName = dataDepartments.map((el) => {\r\n      if(el.code === this.props.valueDepartment){\r\n        return el.name\r\n      }\r\n      return null\r\n    });\r\n\r\n    return (\r\n      <React.Fragment >\r\n        <div key = \"Department\" className=\"Protocol_Row\">\r\n          <div  className=\"Protocol_HeadCell\" >\r\n            Заседание кафедры <div className=\"Protocol_HeadCell\"> «{departmentName}» </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BlockDepartment_Edit;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport dataTeachers from '../../dataTeachers';\r\nimport {connect} from \"react-redux\";\r\n\r\nclass BlockTeachers_Edit extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    checkedDepartment: PropTypes.string.isRequired,\r\n    checkedTeachers: PropTypes.array.isRequired,\r\n    };\r\n\r\n  render(){\r\n    //console.log(\"checkedTeachers\", this.props.checkedTeachers )\r\n    let arrDisplay\r\n    if(this.props.checkedTeachers.length>0){\r\n      arrDisplay = dataTeachers.map((el) =>{\r\n        return  (this.props.checkedTeachers.includes(el.id)) &&\r\n          <span className=\"Protocol_Teacher_label\" key={el.fio}> {el.position}, {el.rank} {el.fio}, </span>\r\n      });\r\n    }\r\n    else {\r\n      arrDisplay = <span>{this.props.checkedDepartment}</span>\r\n    }\r\n\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div key = \"Teachers\" className=\"Protocol_Row\">\r\n          <div  className=\"Protocol_HeadCell\" >\r\n            Присутствовали - {this.props.checkedTeachers.length} чел.</div>\r\n          <div className=\"Protocol_Teachers_box\">\r\n          {arrDisplay}\r\n          </div>\r\n          </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = function (state) {\r\n  return {\r\n    lastSubNum: state.protocol.lastSubNum,\r\n    lastId: state.protocol.lastId,\r\n    blocks: state.protocol.blocks,\r\n\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(BlockTeachers_Edit);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass BlockSubject_Edit extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    subData: PropTypes.object.isRequired,\r\n  };\r\n\r\n  render(){\r\n    let subject = (\r\n      <div key={this.props.subNumber} className=\"Protocol_Row\">\r\n        <div className=\"Protocol_HeadCell\">СЛУШАЛИ ВОПРОС  </div>\r\n\r\n        <div className=\"Protocol_Row\">Тема:\r\n          <span className=\"textareaList\">{this.props.subData.topicSubject}</span>\r\n        </div>\r\n\r\n        <div className=\"Protocol_Row\">\r\n          <span className=\"textareaList\">{this.props.subData.textSubject}</span>\r\n        </div>\r\n\r\n        <div className=\"Protocol_Row\"> Решили:\r\n          <span className=\"textareaList\">{this.props.subData.textDecision}\r\n            </span>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <React.Fragment>\r\n       {subject}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BlockSubject_Edit;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from \"react-redux\";\r\nclass BlockAgenda_View extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    subNumber: PropTypes.number.isRequired,\r\n    subData: PropTypes.object.isRequired,\r\n  };\r\n\r\n  render(){\r\n    return (\r\n      <React.Fragment>\r\n        <div key={this.props.subNumber} className=\"Protocol_Row\">\r\n          <div className=\"Protocol_HeadCell\">СЛУШАЛИ ВОПРОС №{this.props.subNumber}  </div>\r\n\r\n          <div className=\"Protocol_Row\">Тема:\r\n            <span className=\"textareaList\">{this.props.subData.topicSubject}</span>\r\n          </div>\r\n\r\n          <div className=\"Protocol_Row\">\r\n            <span className=\"textareaList\">{this.props.subData.textSubject}</span>\r\n          </div>\r\n\r\n          <div className=\"Protocol_Row\"> Решили:\r\n            <span className=\"textareaList\">{this.props.subData.textDecision}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = function (state) {\r\n  return {\r\n    lastId: state.protocolList.lastId,\r\n    blocks: state.protocolList.blocks,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(BlockAgenda_View);\r\n","import React from 'react';\r\n\r\nimport './Protocol.css';\r\nimport BlockDate_View from \"./Blokcs/BlockDate_View\";\r\nimport BlockNumber_View from \"./Blokcs/BlockNumber_View\";\r\nimport BlockDepartment_View from \"./Blokcs/BlockDepartment_View\";\r\nimport BlockTeachers_View from \"./Blokcs/BlockTeachers_View\";\r\nimport BlockSubject_View from \"./Blokcs/BlockSubject_View\";\r\nimport BlockAgenda_View from \"./Blokcs/BlockAgenda_View\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {protocol_previewAC} from \"../redux/protocolAC\";\r\n\r\nclass ProtocolViewer extends React.PureComponent {\r\ncomponentDidMount() {\r\n  this.props.dispatch (protocol_previewAC())\r\n}\r\n\r\n  render(){\r\n\r\n    let Blocks = {\r\n      \"DATE\": {\r\n        viewComp: BlockDate_View,\r\n      },\r\n      \"NUMBER\": {\r\n        viewComp: BlockNumber_View,\r\n      },\r\n      \"DEPARTMENT\": {\r\n        viewComp:BlockDepartment_View,\r\n      },\r\n      \"TEACHERS\": {\r\n        viewComp: BlockTeachers_View,\r\n      },\r\n      \"AGENDA\": {\r\n        viewComp: BlockAgenda_View,\r\n      },\r\n      \"SUBJECT\": {\r\n        viewComp: BlockSubject_View,\r\n      },\r\n    };\r\n\r\n  let protocol = this.props.protocolsList.find(el => el.id === 100);\r\n    console.log(protocol)\r\n    let BlocksView = this.props.dataProtocol.map((el, i) =>{\r\n      let ViewComp = Blocks[el.blockType].viewComp;\r\n      return <ViewComp key={i} {...el}/>;\r\n    });\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div key=\"Protocol_Table\" className=\"Protocol_Table\">\r\n          {BlocksView}\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = function (state) {\r\n  return {\r\n    protocolsList: state.protocolsList.dataProtocolsList,\r\n    dataProtocol: state.protocol.dataProtocol.protocolBlocks\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ProtocolViewer);\r\n","import React from 'react';\r\n\r\nimport './Page_Preview.css'\r\n\r\nimport ProtocolViewer from \"../components/ProtocolViewer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nclass Page_Preview extends React.PureComponent {\r\n\r\n\r\n  render() {\r\nconsole.log(this.props)\r\n\r\n    return (\r\n      <React.Fragment>\r\n\r\n        <div key=\"Menu\" className=\"Protocol_control\">\r\n          <div className=\"Preview_title\"><h2> Просмотр протокола </h2></div>\r\n\r\n          <input className = 'Protocol_button saveBut' type=\"button\" value=\"Сохранить\" onClick={this.showAllClients} />\r\n\r\n          <NavLink to=\"/protocolRedact\" exact className='Protocol_button' previewlink = {this.props.match.params}> Назад </NavLink>\r\n\r\n               </div>\r\n        <div className=\"Preview_title\"> <h2>Просмотр протокола</h2> </div>\r\n\r\n<div className=\"ProtocolList_table\">\r\n        <div className=\"ProtocolInfo_box \">\r\n          <ProtocolViewer/>\r\n        </div>\r\n</div>\r\n      </React.Fragment>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default Page_Preview;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport departments from  '../dataDepartments'\r\n\r\nimport { protocol_redactAC, protocol_setAC} from \"../redux/protocolAC\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {protocol_deleteAC} from \"../redux/protocolsListAC\";\r\n\r\n// -------- ФУНКЦИЯ ПОЛУЧЕНИЯ ПОЛНОГО НАЗВАНИЯ КАФЕДРЫ ------------\r\nconst convertDepName = (code, departments)=> {\r\n  departments.forEach((el) => {\r\n    if(el.code === code){\r\n      code = el.name;\r\n    }\r\n  });\r\n  return code;\r\n};\r\n\r\n\r\nclass Protocol extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    date: PropTypes.string.isRequired,  // получаем от родителя\r\n    dep: PropTypes.string.isRequired,   // получаем от родителя\r\n    num: PropTypes.number.isRequired,   // получаем от родителя\r\n    prId:PropTypes.number.isRequired,   // получаем от родителя\r\n  };\r\n\r\n\r\n// ------- ФУНКЦИЯ ВЫЗОВА КАРТОЧКИ РЕДАКТИРОВАНИЯ ПРОТОКОЛА --------\r\n  redactProtocol = ()=> {\r\n   // console.log(this.props.prId)\r\n\r\n   let idProtocol = this.props.prId;    // находим ID протокола\r\n   // console.log((this.props.dataProtocol))\r\n    let  dataProtocol = this.props.protocolsList.dataProtocolsList;           // ----- список всех протоколов\r\n    if (idProtocol) {                                                         // ----- если ID протокола передан\r\n      dataProtocol = dataProtocol.find(el => el.id === idProtocol);           // ----- то найти протокол в списке\r\n      let lastSubNumber = dataProtocol.protocolBlocks[dataProtocol.protocolBlocks.length -1].subNumber;     // ----- считаем количество блоков Subject\r\n\r\n      this.props.dispatch(protocol_setAC(1, dataProtocol, lastSubNumber)) // dataProtocol передать, но сначала найти его\r\n    }\r\n    else {\r\n      this.props.dispatch(protocol_redactAC())\r\n    }\r\n    this.props.history.push(\"/protocolRedact/\" + this.props.prId)\r\n  };\r\n\r\n  deleteProtocol = () => {\r\n    let idProtocol = this.props.prId;    // находим ID протокола\r\n    let index;\r\n    this.props.protocolsList.dataProtocolsList.filter((el,i) => {\r\n      if(el.id === idProtocol) {\r\n         index = i\r\n      }\r\n      return null\r\n    });\r\n    this.props.dispatch(protocol_deleteAC(index))\r\n\r\n  };\r\n\r\n  render(){\r\n    return (\r\n      <React.Fragment>\r\n        <tr className = 'ProtocolList_tr' //key = {this.props.client.id}\r\n          //className = {this.props.itemClassName}\r\n           >\r\n          <td className = 'ProtocolList_td'>{this.props.num}</td>\r\n          <td className = 'ProtocolList_td'>{this.props.date}</td>\r\n          <td className = 'ProtocolList_td'>{convertDepName(this.props.dep, departments)}</td>\r\n          <td className = 'ProtocolList_td'>\r\n\r\n            <input  type = 'button'\r\n                    className = 'edit__button'\r\n                    onClick ={this.redactProtocol}\r\n                    data-id ={this.props.prId}\r\n                    value = 'Редактировать'/>\r\n          </td>\r\n          <td className = 'ProtocolList_td'>\r\n            <input  type = 'button'\r\n                    className = 'delete__button'\r\n                    data-id ={this.props.prId}\r\n                    onClick = {this.deleteProtocol}\r\n                    value = 'Удалить'/>\r\n          </td>\r\n        </tr>\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = function (state) {\r\n  // console.log(state.protocolsList)\r\n  return {\r\n    dataProtocol: state.protocol.dataProtocol.protocolBlocks,\r\n    protocolsList: state.protocolsList, // подписаться для того что б найти нужный протокол и передать его в ProtocolRedact\r\n  };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps)(Protocol));\r\nexport {convertDepName}\r\n\r\n","import React from 'react';\r\n\r\nimport './Page_ProtocolsList.css'\r\nimport {connect} from \"react-redux\";\r\nimport Protocol from \"../components/Protocol\";\r\nimport {  protocol_list_sortAC} from \"../redux/protocolsListAC\";\r\nimport {protocol_createAC} from \"../redux/protocolAC\";\r\n\r\nclass Page_ProtocolsList extends React.PureComponent {\r\n\r\n   componentDidMount() {\r\n\r\n     if (this.props.data.status === 4) {\r\n       const ajaxHandlerScript = \"https://fe.it-academy.by/AjaxStringStorage2.php\";\r\n       let updatePassword = Math.random();\r\n       let JSONProtocol = JSON.stringify(this.props.data.dataProtocolsList);\r\n\r\n       // отдельно создаём набор POST-параметров запроса LOCKGET\r\n       let spLock = new URLSearchParams();\r\n       spLock.append('f', 'LOCKGET');\r\n       spLock.append('n', 'ZHOLUD_PR_PROTOCOLS');\r\n       spLock.append('p', updatePassword);\r\n\r\n       // отдельно создаём набор POST-параметров запроса UPDATE\r\n       let sp = new URLSearchParams();\r\n       sp.append('f', 'UPDATE');\r\n       sp.append('n', 'ZHOLUD_PR_PROTOCOLS');\r\n       sp.append('v', JSONProtocol);\r\n       sp.append('p', updatePassword);\r\n\r\n       fetch(ajaxHandlerScript, {method: 'post', body: spLock})\r\n         .then(response => {\r\n           console.log(response);\r\n           return fetch(ajaxHandlerScript, {method: 'post', body: sp})\r\n         })\r\n         .catch(error => {\r\n           console.error(error);\r\n         });\r\n     }\r\n   }\r\n\r\n  createProtocol = () =>{\r\n    this.props.dispatch (protocol_createAC(1))\r\n    this.props.history.push('/protocolRedact');\r\n  }\r\n\r\n\r\n// ----------------------  СОРТИРУЕМ ПО НОМЕРУ ПРОТОКОЛЫ ------------------------ //\r\n  sortByNumber = () => {\r\n      let sortList = this.props.data.dataProtocolsList.slice();\r\n      sortList.sort((el1, el2)=>{\r\n      if(el1.numProtocol<el2.numProtocol) return -1;\r\n      if(el1.numProtocol>el2.numProtocol) return 1;\r\n      return null\r\n    })\r\n    this.props.dispatch (protocol_list_sortAC(sortList))\r\n  }\r\n// ----------------------  СОРТИРУЕМ ПО ДАТЕ ПРОТОКОЛЫ ------------------------ //\r\n  sortByDate = () => {\r\n    let sortList = this.props.data.dataProtocolsList.slice()\r\n    sortList.sort((el1, el2)=>{\r\n      if(el1.dateProtocol<el2.dateProtocol) return 1;\r\n      if(el1.dateProtocol>el2.dateProtocol) return -1\r\n    return  null\r\n    })\r\n    this.props.dispatch (protocol_list_sortAC(sortList))\r\n  }\r\n// ----------------------  СОРТИРУЕМ ПО КАФЕДРЕ ПРОТОКОЛЫ ------------------------ //\r\n  sortByDepartment = () => {\r\n    let sortList = this.props.data.dataProtocolsList.slice()\r\n    sortList.sort((el1, el2)=>{\r\n      if(el1.departmentPr<el2.departmentPr) return -1;\r\n      if(el1.departmentPr>el2.departmentPr) return 1\r\n      return  null\r\n    })\r\n    this.props.dispatch (protocol_list_sortAC(sortList))\r\n  }\r\n\r\n  render() {\r\n  //console.log(this.props)\r\n   if (this.props.data.status <= 1)\r\n      return \"Перейдите на главную страницу\";\r\n   else {\r\n     let  arrProtocols = this.props.data.dataProtocolsList.map(protocol => {\r\n       return <Protocol key ={protocol.id}\r\n                        num = {parseFloat(protocol.numProtocol)}      // --- данные по котторым строитеся список\r\n                        date = {protocol.dateProtocol}\r\n                        dep={ protocol.departmentPr}\r\n                        prId={protocol.id}\r\n        />});\r\n     return (\r\n        <React.Fragment>\r\n          {/*------------------------ меню управления конструктором -------------------------*/}\r\n          <div key=\"Protocol_control\" className=\"Protocol_control\">\r\n            <div className=\"Preview_title\"><h2> Список протоколов \"Архитектурного факультета\"</h2></div>\r\n            <input className='Protocol_button' type=\"button\" value=\"Создать протокол\" onClick={this.createProtocol}/>\r\n          </div>\r\n\r\n          <table key='table'\r\n                 className='ProtocolList_table'>\r\n                <tbody className='ProtocolList_tbody'>\r\n            <tr className='ProtocolList_tr'>\r\n              <th className='ProtocolList_th' onClick={this.sortByNumber}>№</th>\r\n              <th className='ProtocolList_th' onClick={this.sortByDate}>Дата</th>\r\n              <th className='ProtocolList_th' onClick={this.sortByDepartment}>Кафедра</th>\r\n              <th className='ProtocolList_th'>Редактировать</th>\r\n              <th className='ProtocolList_th'>Удалить</th>\r\n            </tr>\r\n\r\n            {/*СЮДА ДОБАВИТСЯ РЕНДЕР КАЖДОГО ЭЛЕМЕНТА*/}\r\n            {arrProtocols}\r\n\r\n            </tbody>\r\n          </table>\r\n\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = function (state) {\r\n\r\n  return {\r\n    protocol: state.protocol.dataProtocol,\r\n    data: state.protocolsList,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Page_ProtocolsList);\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport Page_Main from './Page_Main';\r\nimport Page_PrConstructor from './Page_ProtocolRedact';\r\nimport Page_Preview from \"./Page_Preview\";\r\nimport Page_ProtocolsList from \"./Page_ProtocolsList\";\r\n\r\nclass PagesRouter extends React.Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <Route path=\"/\" exact component={Page_Main} />\r\n        <Route path=\"/protocolsList\" component={Page_ProtocolsList} />\r\n        <Route path=\"/protocolRedact\" exact component={Page_PrConstructor} />\r\n        <Route path=\"/protocolCreate\" exact component={Page_PrConstructor} />\r\n        <Route path=\"/protocolRedact/:numb\"  component={Page_PrConstructor}/>\r\n        <Route path=\"/protocolPreview/:numb\" component={Page_Preview}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PagesRouter;\r\n","import {\r\n  PROTOCOL_LIST_SET,\r\n  PROTOCOL_LIST_LOADING,\r\n  PROTOCOL_LIST_ERROR,\r\n  PROTOCOL_LIST_SORT,\r\n  PROTOCOL_ADD,\r\n  PROTOCOL_UPDATE,\r\n  PROTOCOL_DELETE,\r\n\r\n} from \"./protocolsListAC\";\r\n\r\nconst initState={\r\n  status: 0, // 0 - ничего не началось, 1 - идёт загрузка, 2 - была ошибка, 3 - данные загружены\r\n  dataProtocolsList: null,\r\n  dataDepartments: null,\r\n  dataTeachers: null,\r\n};\r\n\r\nfunction protocolsListReducer(state=initState, action) {\r\n  switch ( action.type ) {\r\n\r\n    case PROTOCOL_LIST_LOADING: {\r\n      let newState={\r\n        status:1,\r\n        dataProtocolsList: null,\r\n        dataDepartments: null,\r\n        dataTeachers: null,\r\n      };\r\n      return newState;\r\n    }\r\n\r\n    case PROTOCOL_LIST_ERROR: {\r\n      let newState={\r\n        status:2,\r\n        dataProtocolsList: null,\r\n        dataDepartments: null,\r\n        dataTeachers: null,\r\n      };\r\n      return newState;\r\n    }\r\n\r\n    case PROTOCOL_LIST_SET: {\r\n      let newState={  ...state,\r\n        status:3,\r\n        dataProtocolsList:action.dataProtocolsList,\r\n        dataDepartments: action.dataDepartments,\r\n        dataTeachers: action.dataTeachers,\r\n        lastProtocolId: action.lastProtocolId,\r\n      };\r\n      return newState;\r\n    }\r\n\r\n    case PROTOCOL_ADD: {\r\n      let newState= {\r\n        ...state,\r\n        status:4,\r\n        dataProtocolsList:[ ...state.dataProtocolsList, action.dataProtocol]\r\n      };\r\n      return newState;\r\n    }\r\n\r\n    case PROTOCOL_UPDATE: {\r\n      console.log('action: ', action);\r\n      console.log('state до обработки редьюссером: ', state);\r\n        let newState= {\r\n        ...state,\r\n        status:4, // <----- 4 - сохранение данных на сервер\r\n        dataProtocolsList:[ ...state.dataProtocolsList.slice( 0, action.index),\r\n          action.dataProtocol,\r\n          ...state.dataProtocolsList.slice( action.index+1 )\r\n        ]\r\n      };\r\n      console.log('state после обработки редьюссером: ', newState);\r\n      return newState;\r\n    }\r\n\r\n    case PROTOCOL_DELETE: {\r\n// ------ содержит весь протокол -> action.dataProtocol\r\n      let protocolList = [...state.dataProtocolsList.slice()];\r\n      protocolList.splice(action.index, 1);\r\n      let newState= {\r\n        ...state,\r\n        status:4, // <----- 4 - сохранение данных на сервер\r\n        dataProtocolsList: protocolList\r\n      };\r\n      return newState;\r\n    }\r\n\r\n    case PROTOCOL_LIST_SORT: {\r\n      let newState= {\r\n        ...state,\r\n        status:4,\r\n        dataProtocolsList: action.dataProtocol\r\n      };\r\n      return newState;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n\r\n}\r\nexport default protocolsListReducer;","import {\r\n  PROTOCOL_SET,\r\n  PROTOCOL_REDACT,\r\n  PROTOCOL_PREVIEW,\r\n  PROTOCOL_CREATE,\r\n\r\n  BLOCK_CREATE,\r\n  BLOCK_DELETE,\r\n  BLOCK_UPDATE,\r\n} from \"./protocolAC\";\r\n\r\nconst initState={\r\n  lastId: 1005,\r\n  lastSubNum:0,\r\n  title: \"Создать новый протокол\",\r\n  redacting: false,\r\n\r\n  dataProtocol:{\r\n    protocolBlocks: [\r\n      {\r\n        \"id\":1001,\r\n        \"blockType\":\"DATE\",\r\n        \"valueDate\": \"\"\r\n      },\r\n\r\n      {\r\n        \"id\":1002,\r\n        \"blockType\": \"NUMBER\",\r\n        \"valueNumber\": \"\",\r\n      },\r\n      {\r\n        \"id\":1003,\r\n        \"blockType\": \"DEPARTMENT\",\r\n        \"valueDepartment\": \"\",\r\n      },\r\n      {\r\n        \"id\":1004,\r\n        \"blockType\": \"TEACHERS\",\r\n        \"checkedDepartment\": \"\",\r\n        \"checkedTeachers\": []\r\n      },\r\n      {\r\n        \"id\":1005,\r\n        \"blockType\":\"SUBJECT\",\r\n        \"subNumber\": 1,\r\n        \"subData\": {\r\n          \"topicSubject\": \"\",\r\n          \"informationFrom\": \"\",\r\n          \"textSubject\": \"\",\r\n          \"textDecision\": \"\",\r\n        }\r\n      },\r\n    ]\r\n  }\r\n};\r\n\r\nfunction protocolReducer(state=initState, action) {\r\n  switch ( action.type ) {\r\n\r\n//----------- РЕДАКТИРОВАНИЕ PROTOCOL ----------------------\r\n    case PROTOCOL_SET: {\r\n     // console.log('action: ', action);\r\n     // console.log('state до обработки редьюссером: ', state);\r\n      let newState= { ...state,\r\n        status:0,\r\n        redacting: false,\r\n        dataProtocol: action.dataProtocol,\r\n        title: \"Редактировать протокол\",\r\n      };\r\n     // console.log('state после обработки редьюссером: ', newState);\r\n      return newState;\r\n    }\r\n\r\n    case PROTOCOL_CREATE: {\r\n     //console.log('action: ', action);\r\n    // console.log('state до обработки редьюссером: ', state);\r\n      let newState= { ...state,\r\n        redacting: false,\r\n        title: \"Создать новый протокол\",\r\n        dataProtocol:{\r\n          protocolBlocks: [\r\n            {\r\n              \"id\":1001,\r\n              \"blockType\":\"DATE\",\r\n              \"valueDate\": \"\"\r\n            },\r\n\r\n            {\r\n              \"id\":1002,\r\n              \"blockType\": \"NUMBER\",\r\n              \"valueNumber\": \"\",\r\n            },\r\n            {\r\n              \"id\":1003,\r\n              \"blockType\": \"DEPARTMENT\",\r\n              \"valueDepartment\": \"\",\r\n            },\r\n            {\r\n              \"id\":1004,\r\n              \"blockType\": \"TEACHERS\",\r\n              \"checkedDepartment\": \"\",\r\n              \"checkedTeachers\": []\r\n            },\r\n            {\r\n              \"id\":1005,\r\n              \"blockType\":\"SUBJECT\",\r\n              \"subNumber\": 1,\r\n              \"subData\": {\r\n                \"topicSubject\": \"\",\r\n                \"informationFrom\": \"\",\r\n                \"textSubject\": \"\",\r\n                \"textDecision\": \"\",\r\n              }\r\n            },\r\n\r\n          ]\r\n        }\r\n      };\r\n      //console.log('state после обработки редьюссером: ', newState);\r\n      return newState;\r\n    }\r\n\r\n    case PROTOCOL_REDACT: {\r\n      let newState= {\r\n        ...state,\r\n      };\r\n      return newState;\r\n    }\r\n\r\n    case PROTOCOL_PREVIEW: {\r\n      let newState= {\r\n        ...state,\r\n      };\r\n\r\n      return newState;\r\n      }\r\n\r\n\r\n\r\n//----------- РЕДАКТИРОВАНИЕ BLOCK ----------------------\r\n\r\n    case BLOCK_CREATE: {\r\n      // НАДО СОЗДАТЬ НОВЫЙ БЛОК\r\n      // редьюсер ВСЕГДА должен возвращать новый state а не изменять старый!\r\n     // console.log('action: ', action);\r\n     // console.log('state до обработки редьюссером: ', state);\r\n\r\n      let newBlock ={lastId:state.lastId+1,...action.block };\r\n      let newState= {\r\n        ...state,\r\n        redacting: true,\r\n        id: state.lastId+1,\r\n        dataProtocol: {\r\n          ...state.dataProtocol, protocolBlocks: [...state.dataProtocol.protocolBlocks.slice(0, action.addPosition), newBlock],\r\n          ...state.dataProtocol.protocolBlocks.slice(action.addPosition)\r\n        },\r\n      };\r\n     // console.log('state после обработки редьюссером: ', newState);\r\n      return newState;\r\n    }\r\n\r\n    case BLOCK_DELETE: {\r\n     // console.log('action: ', action);\r\n      //console.log('state до обработки редьюссером: ', state);\r\n\r\n      let newState= {\r\n        ...state,\r\n        redacting: true,\r\n        lastId: state.lastId+1,\r\n        dataProtocol: {\r\n          ...state.dataProtocol,\r\n          protocolBlocks: [...state.dataProtocol.protocolBlocks.filter((el) => el.id !== action.id)]\r\n        },\r\n      };\r\n      //console.log('state после обработки редьюссером: ', state);\r\n      return newState;\r\n    }\r\n\r\n    case BLOCK_UPDATE: {\r\n     // console.log('action: ', action);\r\n     // console.log('state до обработки редьюссером: ', state);\r\n\r\n      let newProtocolBlocks=[...state.dataProtocol.protocolBlocks];\r\n     // console.log(newProtocolBlocks)\r\n      newProtocolBlocks[action.blockPos ]=action.newBlock;\r\n\r\n      let newState= {\r\n      ...state,\r\n        redacting: true,\r\n        dataProtocol:{...state.dataProtocol, protocolBlocks: newProtocolBlocks }};\r\n\r\n      return newState;\r\n\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n}\r\nexport default protocolReducer;","import { combineReducers } from 'redux';\r\n//import blocksReducer from './blocksReducer'\r\nimport protocolsListReducer from \"./protocolsListReducer\";\r\nimport protocolReducer from \"./protocolReducer\";\r\n\r\nlet combinedReducer = combineReducers({\r\n  //blocks: blocksReducer,    // отвечает за раздел state под именем protocolList\r\n  protocol: protocolReducer,\r\n  protocolsList: protocolsListReducer,\r\n});\r\n\r\nexport default combinedReducer;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport PagesLinks from './pages/PagesLinks';\r\nimport PagesRouter from './pages/PageRouter';\r\n\r\nimport {Provider} from 'react-redux';\r\nimport {createStore} from 'redux';\r\nimport combinedReducer from './redux/reducers';\r\n\r\nlet store = createStore(combinedReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <PagesLinks/>\r\n        </header>\r\n\r\n        <main className=\"App-main\">\r\n          <PagesRouter/>\r\n        </main>\r\n\r\n        <footer className=\"App-footer\">\r\n        </footer>\r\n      </div>\r\n    </BrowserRouter>\r\n    </Provider>\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n//import \"./insertData\"\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}